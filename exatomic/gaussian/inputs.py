# -*- coding: utf-8 -*-
# Copyright (c) 2015-2016, Exa Analytics Development Team
# Distributed under the terms of the Apache License 2.0
"""
Gaussian Input Generator
###########################
Editor class and helper function for writing input files.
"""

from .editor import Editor
from exatomic import __version__

_template = """\
{link0}
{route}

{title}

{charge} {mult}
{atom}

{basis}
{ecp}
{options}

"""

class InputGenerator(Editor):

    def __init(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


def _handle_args(kwarg, args):
    if isinstance(args, str):
        return args
    ret = ''
    if kwarg == 'link0':
        if isinstance(args, dict):
            args = args.items()
        for key, arg in args:
            ret += '%' + key + '=' + str(arg) + '\n'
        return ret[:-1]
    elif kwarg == 'route':
        ret += '# '
        if isinstance(args, dict):
            args = args.items()
        for key, arg in args:
            if arg:
                ret += key + '=' + arg + ' '
            else:
                ret += key + ' '
        return ret
    elif kwarg == 'basis':
        if isinstance(args, dict):
            args = args.items()
        for key, arg in args:
            ret += key + '   0\n' + arg + '\n****\n'
        return ret
    elif kwarg == 'ecp':
        if isinstance(args, dict):
            args = args.items()
        for key, arg in args:
            ret += key + '   0\n' + arg + '\n'
        return ret
    else:
        raise NotImplementedError('{} keyword is not currently supported'.format(key))


def write_gaussian_input(universe, link0='',
                         route='# HF/6-31G(d)', title='',
                         charge=0, mult=1, basis='', ecp='', options='',
                         fp=None):
    """
    Simple wrapper around Gaussian input file generation.
    Arguments can either be strings or iterables of key, value pairs (dict, list, tuple).
    If the key does not require a value, specify an empty string '' as the value.
    """
    kwargs = {}
    kwargs['atom'] = universe.atom.to_xyz()
    kwargs['link0'] = _handle_args('link0', link0)
    kwargs['route'] = _handle_args('route', route)
    kwargs['title'] = '{} -- generated by exatomic.v{}'.format(title, __version__)
    kwargs['charge'] = charge
    kwargs['mult'] = mult
    kwargs['basis'] = _handle_args('basis', basis)
    kwargs['ecp'] = _handle_args('ecp', ecp)
    kwargs['options'] = options
    fl = InputGenerator(_template)
    fl.format(inplace=True, **kwargs)
    if fp is not None:
        fl.write(fp)
    else:
        return fl
