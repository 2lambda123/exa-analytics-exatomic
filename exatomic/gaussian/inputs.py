# -*- coding: utf-8 -*-
# Copyright (c) 2015-2016, Exa Analytics Development Team
# Distributed under the terms of the Apache License 2.0
"""
Gaussian Input Generator
###########################
Editor class and helper function for writing input files.
"""

from .editor import Editor
from exatomic import __version__

_template = """\
{link0}
{route}

{title}

{charge} {mult}
{atom}

{basis}{ecp}{options}

"""

class Input(Editor):

    @classmethod
    def from_universe(cls, uni, link0='', route='#P HF/6-31G(d)', title='', name='',
                      charge=0, mult=1, basis='', ecp='', options='', fp=None):
        """
        Generate an input Editor from a universe. Arguments can either be
        strings or iterables of key, value pairs (dict, list, tuple).  If the
        key does not require a value, specify an empty string '' as the value.
        """
        kwargs = {}
        kwargs['mult'] = mult
        kwargs['charge'] = charge
        kwargs['atom'] = uni.atom.to_xyz()
        kwargs['link0'] = _handle_args('link0', link0)
        kwargs['route'] = _handle_args('route', route)
        kwargs['basis'] = _handle_args('basis', basis)
        kwargs['ecp'] = _handle_args('ecp', ecp)
        kwargs['options'] = options
        if name and not title: title = name
        kwargs['title'] = '{} -- generated by exatomic.v{}'.format(
                                                title, __version__)
        fl = cls(_template)
        fl.format(inplace=True, **kwargs)
        if fp is not None: fl.write(fp)
        else: return fl

    def __init(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


def _handle_args(kwarg, args):
    if isinstance(args, str): return args
    if isinstance(args, dict): args = args.items()
    clean = []
    for arg in args:
        try:
            k, v = arg
            clean.append((k, v))
        except ValueError:
            clean.append((str(arg), ''))
    if kwarg == 'link0':
        return ''.join([''.join(['%', key, '=', str(arg), '\n'])
                       for key, arg in clean])[:-1]
    elif kwarg == 'route':
        return ''.join(['#P '] + [''.join([key, '(', arg, ') '])
                       if arg else key + ' ' for key, arg in clean])
    elif kwarg == 'basis':
        return ''.join([''.join([key, '   0\n', arg, '\n****\n'])
                       if arg else key + '\n\n' for key, arg in clean])
    elif kwarg == 'ecp':
        return ''.join([''.join([key, '   0\n', arg, '\n'])
                       for key, arg in clean])
    else:
        raise NotImplementedError('{} keyword is not currently '
                                  'supported'.format(key))
