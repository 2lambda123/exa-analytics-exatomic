name: Branch

on:
  push:
    branches-ignore:
      - 'master'

env:
  EXA_VERSION: 0.5.24
  REFERENCE_OS: Linux
  REFERENCE_PY: "3.8"

jobs:

  run_tests:
    name: Test (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.6", "3.7", "3.8"]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set Up Python
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          channels: conda-forge,exaanalytics

      - name: Install Dependencies (Nix)
        shell: bash -l {0}
        if: (${{ runner.os == "Linux" }} || ${{ runner.os == "macOS" }})
        run: |
          conda install -q -c exaanalytics exa>=${{ env.EXA_VERSION }}
          conda install -q -c conda-forge `cat requirements.txt`
          conda install -q -c anaconda h5py
          conda install -q -c conda-forge `cat requirements.dev.txt`
          python setup.py develop

      - name: Install Dependencies (Win)
        shell: pwsh
        if: ${{ runner.os == "Windows" }}
        run: |
          conda install -q -c exaanalytics exa>=${{ env.EXA_VERSION }}
          conda install -q -c conda-forge `cat requirements.txt`
          conda install -q -c anaconda h5py
          conda install -q -c conda-forge `cat requirements.dev.txt`
          python setup.py develop

      - name: Run tests
        shell: bash -l {0}
        if: (${{ runner.os == "Linux" }} || ${{ runner.os == "macOS" }})
        run: pytest --doctest-modules -v --cov coveralls --cov-report term --cov=exatomic --cov-report xml

      - name: Run tests
        shell: pwsh
        if: ${{ runner.os == "Windows" }}
        run: pytest --doctest-modules -v --cov coveralls --cov-report term --cov=exatomic --cov-report xml

      - name: Publish coverage
        shell: bash -l {0}
        if: (${{ runner.os == env.REFERENCE_OS }} && ${{ matrix.python-version == env.REFERENCE_PY }})
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report --language Python -r coverage.xml


